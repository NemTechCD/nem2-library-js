/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AliasDTO from './AliasDTO';
import NamespaceTypeEnum from './NamespaceTypeEnum';

/**
 * The NamespaceDTO model module.
 * @module model/NamespaceDTO
 * @version 0.7.15
 */
class NamespaceDTO {
    /**
     * Constructs a new <code>NamespaceDTO</code>.
     * @alias module:model/NamespaceDTO
     * @param owner {String} The public key of the owner of the namespace.
     * @param ownerAddress {String} The address of the owner of the namespace in hexadecimal.
     * @param startHeight {Array.<Number>} 
     * @param endHeight {Array.<Number>} 
     * @param depth {Number} The level of the namespace.
     * @param level0 {Array.<Number>} 
     * @param type {module:model/NamespaceTypeEnum} 
     * @param alias {module:model/AliasDTO} 
     * @param parentId {Array.<Number>} 
     */
    constructor(owner, ownerAddress, startHeight, endHeight, depth, level0, type, alias, parentId) { 
        
        NamespaceDTO.initialize(this, owner, ownerAddress, startHeight, endHeight, depth, level0, type, alias, parentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, owner, ownerAddress, startHeight, endHeight, depth, level0, type, alias, parentId) { 
        obj['owner'] = owner;
        obj['ownerAddress'] = ownerAddress;
        obj['startHeight'] = startHeight;
        obj['endHeight'] = endHeight;
        obj['depth'] = depth;
        obj['level0'] = level0;
        obj['type'] = type;
        obj['alias'] = alias;
        obj['parentId'] = parentId;
    }

    /**
     * Constructs a <code>NamespaceDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamespaceDTO} obj Optional instance to populate.
     * @return {module:model/NamespaceDTO} The populated <code>NamespaceDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamespaceDTO();

            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('ownerAddress')) {
                obj['ownerAddress'] = ApiClient.convertToType(data['ownerAddress'], 'String');
            }
            if (data.hasOwnProperty('startHeight')) {
                obj['startHeight'] = ApiClient.convertToType(data['startHeight'], ['Number']);
            }
            if (data.hasOwnProperty('endHeight')) {
                obj['endHeight'] = ApiClient.convertToType(data['endHeight'], ['Number']);
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('level0')) {
                obj['level0'] = ApiClient.convertToType(data['level0'], ['Number']);
            }
            if (data.hasOwnProperty('level1')) {
                obj['level1'] = ApiClient.convertToType(data['level1'], ['Number']);
            }
            if (data.hasOwnProperty('level2')) {
                obj['level2'] = ApiClient.convertToType(data['level2'], ['Number']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = NamespaceTypeEnum.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = AliasDTO.constructFromObject(data['alias']);
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * The public key of the owner of the namespace.
 * @member {String} owner
 */
NamespaceDTO.prototype['owner'] = undefined;

/**
 * The address of the owner of the namespace in hexadecimal.
 * @member {String} ownerAddress
 */
NamespaceDTO.prototype['ownerAddress'] = undefined;

/**
 * @member {Array.<Number>} startHeight
 */
NamespaceDTO.prototype['startHeight'] = undefined;

/**
 * @member {Array.<Number>} endHeight
 */
NamespaceDTO.prototype['endHeight'] = undefined;

/**
 * The level of the namespace.
 * @member {Number} depth
 */
NamespaceDTO.prototype['depth'] = undefined;

/**
 * @member {Array.<Number>} level0
 */
NamespaceDTO.prototype['level0'] = undefined;

/**
 * @member {Array.<Number>} level1
 */
NamespaceDTO.prototype['level1'] = undefined;

/**
 * @member {Array.<Number>} level2
 */
NamespaceDTO.prototype['level2'] = undefined;

/**
 * @member {module:model/NamespaceTypeEnum} type
 */
NamespaceDTO.prototype['type'] = undefined;

/**
 * @member {module:model/AliasDTO} alias
 */
NamespaceDTO.prototype['alias'] = undefined;

/**
 * @member {Array.<Number>} parentId
 */
NamespaceDTO.prototype['parentId'] = undefined;






export default NamespaceDTO;

