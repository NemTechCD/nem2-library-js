/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import EmbeddedTransactionDTO from './EmbeddedTransactionDTO';
import EntityTypeEnum from './EntityTypeEnum';
import MessageDTO from './MessageDTO';
import MosaicDTO from './MosaicDTO';
import NetworkTypeEnum from './NetworkTypeEnum';
import TransferTransactionBodyDTO from './TransferTransactionBodyDTO';
import UInt64DTO from './UInt64DTO';





/**
* The EmbeddedTransferTransactionDTO model module.
* @module model/EmbeddedTransferTransactionDTO
* @version 0.7.15
*/
export default class EmbeddedTransferTransactionDTO {
    /**
    * Constructs a new <code>EmbeddedTransferTransactionDTO</code>.
    * @alias module:model/EmbeddedTransferTransactionDTO
    * @class
    * @implements module:model/EmbeddedTransactionDTO
    * @implements module:model/TransferTransactionBodyDTO
    * @param signer {String} The public key of the entity signer formatted as hexadecimal.
    * @param version {module:model/NetworkTypeEnum} 
    * @param type {module:model/EntityTypeEnum} 
    * @param maxFee {module:model/UInt64DTO} 
    * @param deadline {module:model/UInt64DTO} 
    * @param recipient {String} If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
    * @param mosaics {Array.<module:model/MosaicDTO>} The array of mosaics sent to the recipient. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of a instead of a mosaicId corresponds to a mosaicId.
    * @param message {module:model/MessageDTO} 
    */

    constructor(signer, version, type, maxFee, deadline, recipient, mosaics, message) {
        



        

        
    }

    /**
    * Constructs a <code>EmbeddedTransferTransactionDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/EmbeddedTransferTransactionDTO} obj Optional instance to populate.
    * @return {module:model/EmbeddedTransferTransactionDTO} The populated <code>EmbeddedTransferTransactionDTO</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmbeddedTransferTransactionDTO();

            
            
            EmbeddedTransactionDTO.constructFromObject(data, obj);TransferTransactionBodyDTO.constructFromObject(data, obj);

        }
        return obj;
    }



    // Implement EmbeddedTransactionDTO interface:
    /**
    * The public key of the entity signer formatted as hexadecimal.
    * @member {String} signer
    */
    signer = undefined;
/**
    * @member {module:model/NetworkTypeEnum} version
    */
    version = undefined;
/**
    * @member {module:model/EntityTypeEnum} type
    */
    type = undefined;
/**
    * @member {module:model/UInt64DTO} max_fee
    */
    max_fee = undefined;
/**
    * @member {module:model/UInt64DTO} deadline
    */
    deadline = undefined;

    // Implement TransferTransactionBodyDTO interface:
    /**
    * If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
    * @member {String} recipient
    */
    recipient = undefined;
/**
    * The array of mosaics sent to the recipient. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of a instead of a mosaicId corresponds to a mosaicId.
    * @member {Array.<module:model/MosaicDTO>} mosaics
    */
    mosaics = undefined;
/**
    * @member {module:model/MessageDTO} message
    */
    message = undefined;







}


