/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResolutionStatementDTO from './ResolutionStatementDTO';
import TransactionStatementDTO from './TransactionStatementDTO';

/**
 * The StatementsDTO model module.
 * @module model/StatementsDTO
 * @version 0.7.15
 */
class StatementsDTO {
    /**
     * Constructs a new <code>StatementsDTO</code>.
     * The collection of transaction statements and resolutions triggered for the block requested.
     * @alias module:model/StatementsDTO
     * @param transactionStatements {Array.<module:model/TransactionStatementDTO>} The array of transaction statements for the block requested.
     * @param addressResolutionStatements {Array.<module:model/ResolutionStatementDTO>} The array of address resolutions for the block requested.
     * @param mosaicResolutionStatements {Array.<module:model/ResolutionStatementDTO>} The array of mosaic resolutions for the block requested.
     */
    constructor(transactionStatements, addressResolutionStatements, mosaicResolutionStatements) { 
        
        StatementsDTO.initialize(this, transactionStatements, addressResolutionStatements, mosaicResolutionStatements);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactionStatements, addressResolutionStatements, mosaicResolutionStatements) { 
        obj['transactionStatements'] = transactionStatements;
        obj['addressResolutionStatements'] = addressResolutionStatements;
        obj['mosaicResolutionStatements'] = mosaicResolutionStatements;
    }

    /**
     * Constructs a <code>StatementsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatementsDTO} obj Optional instance to populate.
     * @return {module:model/StatementsDTO} The populated <code>StatementsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatementsDTO();

            if (data.hasOwnProperty('transactionStatements')) {
                obj['transactionStatements'] = ApiClient.convertToType(data['transactionStatements'], [TransactionStatementDTO]);
            }
            if (data.hasOwnProperty('addressResolutionStatements')) {
                obj['addressResolutionStatements'] = ApiClient.convertToType(data['addressResolutionStatements'], [ResolutionStatementDTO]);
            }
            if (data.hasOwnProperty('mosaicResolutionStatements')) {
                obj['mosaicResolutionStatements'] = ApiClient.convertToType(data['mosaicResolutionStatements'], [ResolutionStatementDTO]);
            }
        }
        return obj;
    }


}

/**
 * The array of transaction statements for the block requested.
 * @member {Array.<module:model/TransactionStatementDTO>} transactionStatements
 */
StatementsDTO.prototype['transactionStatements'] = undefined;

/**
 * The array of address resolutions for the block requested.
 * @member {Array.<module:model/ResolutionStatementDTO>} addressResolutionStatements
 */
StatementsDTO.prototype['addressResolutionStatements'] = undefined;

/**
 * The array of mosaic resolutions for the block requested.
 * @member {Array.<module:model/ResolutionStatementDTO>} mosaicResolutionStatements
 */
StatementsDTO.prototype['mosaicResolutionStatements'] = undefined;






export default StatementsDTO;

