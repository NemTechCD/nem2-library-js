/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NamespaceDTO from './NamespaceDTO';
import NamespaceMetaDTO from './NamespaceMetaDTO';

/**
 * The NamespaceInfoDTO model module.
 * @module model/NamespaceInfoDTO
 * @version 0.7.15
 */
class NamespaceInfoDTO {
    /**
     * Constructs a new <code>NamespaceInfoDTO</code>.
     * @alias module:model/NamespaceInfoDTO
     * @param meta {module:model/NamespaceMetaDTO} 
     * @param namespace {module:model/NamespaceDTO} 
     */
    constructor(meta, namespace) { 
        
        NamespaceInfoDTO.initialize(this, meta, namespace);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, meta, namespace) { 
        obj['meta'] = meta;
        obj['namespace'] = namespace;
    }

    /**
     * Constructs a <code>NamespaceInfoDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamespaceInfoDTO} obj Optional instance to populate.
     * @return {module:model/NamespaceInfoDTO} The populated <code>NamespaceInfoDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamespaceInfoDTO();

            if (data.hasOwnProperty('meta')) {
                obj['meta'] = NamespaceMetaDTO.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = NamespaceDTO.constructFromObject(data['namespace']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/NamespaceMetaDTO} meta
 */
NamespaceInfoDTO.prototype['meta'] = undefined;

/**
 * @member {module:model/NamespaceDTO} namespace
 */
NamespaceInfoDTO.prototype['namespace'] = undefined;






export default NamespaceInfoDTO;

