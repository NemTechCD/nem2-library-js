/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResolutionEntryDTO from './ResolutionEntryDTO';

/**
 * The ResolutionStatementDTO model module.
 * @module model/ResolutionStatementDTO
 * @version 0.7.15
 */
class ResolutionStatementDTO {
    /**
     * Constructs a new <code>ResolutionStatementDTO</code>.
     * A resolution statement keeps the relation between a namespace alias used in a transaction and the real address or mosaicId.
     * @alias module:model/ResolutionStatementDTO
     * @param height {Array.<Number>} 
     * @param unresolved {Array.<Number>} 
     * @param resolutionEntries {Array.<module:model/ResolutionEntryDTO>} The array of resolution entries linked to the unresolved namespaceId. It is an array instead of a single UInt64 field since within one block the resolution might change for different sources due to alias related transactions.
     */
    constructor(height, unresolved, resolutionEntries) { 
        
        ResolutionStatementDTO.initialize(this, height, unresolved, resolutionEntries);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, height, unresolved, resolutionEntries) { 
        obj['height'] = height;
        obj['unresolved'] = unresolved;
        obj['resolutionEntries'] = resolutionEntries;
    }

    /**
     * Constructs a <code>ResolutionStatementDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResolutionStatementDTO} obj Optional instance to populate.
     * @return {module:model/ResolutionStatementDTO} The populated <code>ResolutionStatementDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResolutionStatementDTO();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], ['Number']);
            }
            if (data.hasOwnProperty('unresolved')) {
                obj['unresolved'] = ApiClient.convertToType(data['unresolved'], ['Number']);
            }
            if (data.hasOwnProperty('resolutionEntries')) {
                obj['resolutionEntries'] = ApiClient.convertToType(data['resolutionEntries'], [ResolutionEntryDTO]);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<Number>} height
 */
ResolutionStatementDTO.prototype['height'] = undefined;

/**
 * @member {Array.<Number>} unresolved
 */
ResolutionStatementDTO.prototype['unresolved'] = undefined;

/**
 * The array of resolution entries linked to the unresolved namespaceId. It is an array instead of a single UInt64 field since within one block the resolution might change for different sources due to alias related transactions.
 * @member {Array.<module:model/ResolutionEntryDTO>} resolutionEntries
 */
ResolutionStatementDTO.prototype['resolutionEntries'] = undefined;






export default ResolutionStatementDTO;

