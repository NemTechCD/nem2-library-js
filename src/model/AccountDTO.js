/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MosaicDTO from './MosaicDTO';

/**
 * The AccountDTO model module.
 * @module model/AccountDTO
 * @version 0.7.15
 */
class AccountDTO {
    /**
     * Constructs a new <code>AccountDTO</code>.
     * @alias module:model/AccountDTO
     * @param address {String} The account unique address not encoded. 
     * @param addressHeight {Array.<Number>} 
     * @param publicKey {String} The public key of an account can be used to verify signatures of the account. Only accounts that have already published a transaction have a public key assigned to the account. Otherwise the field is null. 
     * @param publicKeyHeight {Array.<Number>} 
     * @param mosaics {Array.<module:model/MosaicDTO>} The list of mosaics the account owns. The amount is represented in absolute amount. Thus a balance of 123456789 for a mosaic with divisibility 6 (absolute) means the account owns 123.456789 instead. 
     * @param importance {Array.<Number>} 
     * @param importanceHeight {Array.<Number>} 
     */
    constructor(address, addressHeight, publicKey, publicKeyHeight, mosaics, importance, importanceHeight) { 
        
        AccountDTO.initialize(this, address, addressHeight, publicKey, publicKeyHeight, mosaics, importance, importanceHeight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, addressHeight, publicKey, publicKeyHeight, mosaics, importance, importanceHeight) { 
        obj['address'] = address;
        obj['addressHeight'] = addressHeight;
        obj['publicKey'] = publicKey;
        obj['publicKeyHeight'] = publicKeyHeight;
        obj['mosaics'] = mosaics;
        obj['importance'] = importance;
        obj['importanceHeight'] = importanceHeight;
    }

    /**
     * Constructs a <code>AccountDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountDTO} obj Optional instance to populate.
     * @return {module:model/AccountDTO} The populated <code>AccountDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountDTO();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('addressHeight')) {
                obj['addressHeight'] = ApiClient.convertToType(data['addressHeight'], ['Number']);
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('publicKeyHeight')) {
                obj['publicKeyHeight'] = ApiClient.convertToType(data['publicKeyHeight'], ['Number']);
            }
            if (data.hasOwnProperty('mosaics')) {
                obj['mosaics'] = ApiClient.convertToType(data['mosaics'], [MosaicDTO]);
            }
            if (data.hasOwnProperty('importance')) {
                obj['importance'] = ApiClient.convertToType(data['importance'], ['Number']);
            }
            if (data.hasOwnProperty('importanceHeight')) {
                obj['importanceHeight'] = ApiClient.convertToType(data['importanceHeight'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * The account unique address not encoded. 
 * @member {String} address
 */
AccountDTO.prototype['address'] = undefined;

/**
 * @member {Array.<Number>} addressHeight
 */
AccountDTO.prototype['addressHeight'] = undefined;

/**
 * The public key of an account can be used to verify signatures of the account. Only accounts that have already published a transaction have a public key assigned to the account. Otherwise the field is null. 
 * @member {String} publicKey
 */
AccountDTO.prototype['publicKey'] = undefined;

/**
 * @member {Array.<Number>} publicKeyHeight
 */
AccountDTO.prototype['publicKeyHeight'] = undefined;

/**
 * The list of mosaics the account owns. The amount is represented in absolute amount. Thus a balance of 123456789 for a mosaic with divisibility 6 (absolute) means the account owns 123.456789 instead. 
 * @member {Array.<module:model/MosaicDTO>} mosaics
 */
AccountDTO.prototype['mosaics'] = undefined;

/**
 * @member {Array.<Number>} importance
 */
AccountDTO.prototype['importance'] = undefined;

/**
 * @member {Array.<Number>} importanceHeight
 */
AccountDTO.prototype['importanceHeight'] = undefined;






export default AccountDTO;

