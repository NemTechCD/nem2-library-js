/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NIS2 API
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TransactionStatusDTO from '../model/TransactionStatusDTO';

/**
 * TransactionRoutes service.
 * @module api/TransactionRoutesApi
 * @version 1.0.0
 */
export default class TransactionRoutesApi {

	/**
	 * Constructs a new TransactionRoutesApi.
	 * @alias module:api/TransactionRoutesApi
	 * @class
	 * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
	 * default to {@link module:ApiClient#instance} if unspecified.
	 */
	constructor(apiClient) {
		this.apiClient = apiClient || ApiClient.instance;
	}


	/**
	 * Creates cosignature transaction
	 * Announce a cosignature transaction to the network
	 * @param {module:model/TransactionPayload} payload Transaction payload
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
	 */
	announceCosignatureTransactionWithHttpInfo(payload) {
		let postBody = payload;

		// verify the required parameter 'payload' is set
		if (payload === undefined || payload === null) {
			throw new Error("Missing the required parameter 'payload' when calling announceCosignatureTransaction");
		}


		let pathParams = {};
		let queryParams = {};
		let headerParams = {};
		let formParams = {};

		let authNames = [];
		let contentTypes = [];
		let accepts = ['application/json'];
		let returnType = Object;

		return this.apiClient.callApi(
			'/transaction/cosignature', 'PUT',
			pathParams, queryParams, headerParams, formParams, postBody,
			authNames, contentTypes, accepts, returnType
		);
	}

	/**
	 * Creates cosignature transaction
	 * Announce a cosignature transaction to the network
	 * @param {module:model/TransactionPayload} payload Transaction payload
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
	 */
	announceCosignatureTransaction(payload) {
		return this.announceCosignatureTransactionWithHttpInfo(payload)
			.then(function(response_and_data) {
				return response_and_data.data;
			});
	}


	/**
	 * Creates partial transaction
	 * Announce a partial transaction to the network
	 * @param {module:model/TransactionPayload} payload Transaction payload
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
	 */
	announcePartialTransactionWithHttpInfo(payload) {
		let postBody = payload;

		// verify the required parameter 'payload' is set
		if (payload === undefined || payload === null) {
			throw new Error("Missing the required parameter 'payload' when calling announcePartialTransaction");
		}


		let pathParams = {};
		let queryParams = {};
		let headerParams = {};
		let formParams = {};

		let authNames = [];
		let contentTypes = [];
		let accepts = ['application/json'];
		let returnType = Object;

		return this.apiClient.callApi(
			'/transaction/partial', 'PUT',
			pathParams, queryParams, headerParams, formParams, postBody,
			authNames, contentTypes, accepts, returnType
		);
	}

	/**
	 * Creates partial transaction
	 * Announce a partial transaction to the network
	 * @param {module:model/TransactionPayload} payload Transaction payload
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
	 */
	announcePartialTransaction(payload) {
		return this.announcePartialTransactionWithHttpInfo(payload)
			.then(function(response_and_data) {
				return response_and_data.data;
			});
	}


	/**
	 * Creates new transaction
	 * Announce a transaction to the network
	 * @param {module:model/TransactionPayload} payload Transaction payload
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
	 */
	announceTransactionWithHttpInfo(payload) {
		let postBody = payload;

		// verify the required parameter 'payload' is set
		if (payload === undefined || payload === null) {
			throw new Error("Missing the required parameter 'payload' when calling announceTransaction");
		}


		let pathParams = {};
		let queryParams = {};
		let headerParams = {};
		let formParams = {};

		let authNames = [];
		let contentTypes = [];
		let accepts = ['application/json'];
		let returnType = Object;

		return this.apiClient.callApi(
			'/transaction', 'PUT',
			pathParams, queryParams, headerParams, formParams, postBody,
			authNames, contentTypes, accepts, returnType
		);
	}

	/**
	 * Creates new transaction
	 * Announce a transaction to the network
	 * @param {module:model/TransactionPayload} payload Transaction payload
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
	 */
	announceTransaction(payload) {
		return this.announceTransactionWithHttpInfo(payload)
			.then(function(response_and_data) {
				return response_and_data.data;
			});
	}


	/**
	 * Get ransaction information
	 * Returns transaction information for a given transaction id or hash
	 * @param {String} transactionId Transaction id or hash
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
	 */
	getTransactionWithHttpInfo(transactionId) {
		let postBody = null;

		// verify the required parameter 'transactionId' is set
		if (transactionId === undefined || transactionId === null) {
			throw new Error("Missing the required parameter 'transactionId' when calling getTransaction");
		}


		let pathParams = {
			'transactionId': transactionId
		};
		let queryParams = {};
		let headerParams = {};
		let formParams = {};

		let authNames = [];
		let contentTypes = [];
		let accepts = ['application/json'];
		let returnType = Object;

		return this.apiClient.callApi(
			'/transaction/{transactionId}', 'GET',
			pathParams, queryParams, headerParams, formParams, postBody,
			authNames, contentTypes, accepts, returnType
		);
	}

	/**
	 * Get ransaction information
	 * Returns transaction information for a given transaction id or hash
	 * @param {String} transactionId Transaction id or hash
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
	 */
	getTransaction(transactionId) {
		return this.getTransactionWithHttpInfo(transactionId)
			.then(function(response_and_data) {
				return response_and_data.data;
			});
	}


	/**
	 * Get transaction status
	 * Returns transaction status for a given transaction id or hash
	 * @param {String} hash Transaction hash
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionStatusDTO} and HTTP response
	 */
	getTransactionStatusWithHttpInfo(hash) {
		let postBody = null;

		// verify the required parameter 'hash' is set
		if (hash === undefined || hash === null) {
			throw new Error("Missing the required parameter 'hash' when calling getTransactionStatus");
		}


		let pathParams = {
			'hash': hash
		};
		let queryParams = {};
		let headerParams = {};
		let formParams = {};

		let authNames = [];
		let contentTypes = [];
		let accepts = ['application/json'];
		let returnType = TransactionStatusDTO;

		return this.apiClient.callApi(
			'/transaction/{hash}/status', 'GET',
			pathParams, queryParams, headerParams, formParams, postBody,
			authNames, contentTypes, accepts, returnType
		);
	}

	/**
	 * Get transaction status
	 * Returns transaction status for a given transaction id or hash
	 * @param {String} hash Transaction hash
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionStatusDTO}
	 */
	getTransactionStatus(hash) {
		return this.getTransactionStatusWithHttpInfo(hash)
			.then(function(response_and_data) {
				return response_and_data.data;
			});
	}


	/**
	 * Get transactions information
	 * Returns transaction information for a given set of transaction id or hash
	 * @param {module:model/TransactionIds} transactionIds Array of transaction ids or hashes
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
	 */
	getTransactionsWithHttpInfo(transactionIds) {
		let postBody = transactionIds;

		// verify the required parameter 'transactionIds' is set
		if (transactionIds === undefined || transactionIds === null) {
			throw new Error("Missing the required parameter 'transactionIds' when calling getTransactions");
		}


		let pathParams = {};
		let queryParams = {};
		let headerParams = {};
		let formParams = {};

		let authNames = [];
		let contentTypes = [];
		let accepts = ['application/json'];
		let returnType = [Object];

		return this.apiClient.callApi(
			'/transaction', 'POST',
			pathParams, queryParams, headerParams, formParams, postBody,
			authNames, contentTypes, accepts, returnType
		);
	}

	/**
	 * Get transactions information
	 * Returns transaction information for a given set of transaction id or hash
	 * @param {module:model/TransactionIds} transactionIds Array of transaction ids or hashes
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
	 */
	getTransactions(transactionIds) {
		return this.getTransactionsWithHttpInfo(transactionIds)
			.then(function(response_and_data) {
				return response_and_data.data;
			});
	}


	/**
	 * Get transactions information
	 * Returns transaction information for a given set of transaction id or hash
	 * @param {module:model/TransactionHashes} transactionHashes Array of transaction ids or hashes
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionStatusDTO>} and HTTP response
	 */
	getTransactionsStatusesWithHttpInfo(transactionHashes) {
		let postBody = transactionHashes;

		// verify the required parameter 'transactionHashes' is set
		if (transactionHashes === undefined || transactionHashes === null) {
			throw new Error("Missing the required parameter 'transactionHashes' when calling getTransactionsStatuses");
		}


		let pathParams = {};
		let queryParams = {};
		let headerParams = {};
		let formParams = {};

		let authNames = [];
		let contentTypes = [];
		let accepts = ['application/json'];
		let returnType = [TransactionStatusDTO];

		return this.apiClient.callApi(
			'/transaction/statuses', 'POST',
			pathParams, queryParams, headerParams, formParams, postBody,
			authNames, contentTypes, accepts, returnType
		);
	}

	/**
	 * Get transactions information
	 * Returns transaction information for a given set of transaction id or hash
	 * @param {module:model/TransactionHashes} transactionHashes Array of transaction ids or hashes
	 * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionStatusDTO>}
	 */
	getTransactionsStatuses(transactionHashes) {
		return this.getTransactionsStatusesWithHttpInfo(transactionHashes)
			.then(function(response_and_data) {
				return response_and_data.data;
			});
	}


}
