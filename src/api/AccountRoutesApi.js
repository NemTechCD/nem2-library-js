/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NIS2 API
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountInfoDTO from '../model/AccountInfoDTO';
import Addresses from '../model/Addresses';
import MultisigAccountGraphInfoDTO from '../model/MultisigAccountGraphInfoDTO';
import MultisigAccountInfoDTO from '../model/MultisigAccountInfoDTO';

/**
* AccountRoutes service.
* @module api/AccountRoutesApi
* @version 1.0.0
*/
export default class AccountRoutesApi {

    /**
    * Constructs a new AccountRoutesApi. 
    * @alias module:api/AccountRoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get account information
     * Returns account information for a given address or publicKey
     * @param {String} accountId Account address or publicKey
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountInfoDTO} and HTTP response
     */
    getAccountInfoWithHttpInfo(accountId) {
      let postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountInfo");
      }


      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountInfoDTO;

      return this.apiClient.callApi(
        '/account/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get account information
     * Returns account information for a given address or publicKey
     * @param {String} accountId Account address or publicKey
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountInfoDTO}
     */
    getAccountInfo(accountId) {
      return this.getAccountInfoWithHttpInfo(accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get account information
     * Returns information for a given address or publicKey
     * @param {String} accountId The multisig account address or public key for which information should be retreived.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MultisigAccountInfoDTO} and HTTP response
     */
    getAccountMultisigWithHttpInfo(accountId) {
      let postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountMultisig");
      }


      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultisigAccountInfoDTO;

      return this.apiClient.callApi(
        '/account/{accountId}/multisig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get account information
     * Returns information for a given address or publicKey
     * @param {String} accountId The multisig account address or public key for which information should be retreived.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MultisigAccountInfoDTO}
     */
    getAccountMultisig(accountId) {
      return this.getAccountMultisigWithHttpInfo(accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get multisig graph information
     * Returns information of all accounts address or publicKey is cosignatory
     * @param {String} accountId The multisig account address public key for which information should be retreived.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MultisigAccountGraphInfoDTO>} and HTTP response
     */
    getAccountMultisigGraphWithHttpInfo(accountId) {
      let postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountMultisigGraph");
      }


      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MultisigAccountGraphInfoDTO];

      return this.apiClient.callApi(
        '/account/{accountId}/multisig/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get multisig graph information
     * Returns information of all accounts address or publicKey is cosignatory
     * @param {String} accountId The multisig account address public key for which information should be retreived.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MultisigAccountGraphInfoDTO>}
     */
    getAccountMultisigGraph(accountId) {
      return this.getAccountMultisigGraphWithHttpInfo(accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get accounts information
     * Returns accounts information for a given set of address and publicKey
     * @param {module:model/Addresses} addresses Accounts address array
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AccountInfoDTO>} and HTTP response
     */
    getAccountsInfoWithHttpInfo(addresses) {
      let postBody = addresses;

      // verify the required parameter 'addresses' is set
      if (addresses === undefined || addresses === null) {
        throw new Error("Missing the required parameter 'addresses' when calling getAccountsInfo");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountInfoDTO];

      return this.apiClient.callApi(
        '/account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get accounts information
     * Returns accounts information for a given set of address and publicKey
     * @param {module:model/Addresses} addresses Accounts address array
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AccountInfoDTO>}
     */
    getAccountsInfo(addresses) {
      return this.getAccountsInfoWithHttpInfo(addresses)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get incoming transactions information
     * Returns incoming transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    incomingTransactionsWithHttpInfo(publicKey, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'publicKey' is set
      if (publicKey === undefined || publicKey === null) {
        throw new Error("Missing the required parameter 'publicKey' when calling incomingTransactions");
      }


      let pathParams = {
        'publicKey': publicKey
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/account/{publicKey}/transactions/incoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get incoming transactions information
     * Returns incoming transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    incomingTransactions(publicKey, opts) {
      return this.incomingTransactionsWithHttpInfo(publicKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get outgoing transactions information
     * Returns outgoing transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    outgoingTransactionsWithHttpInfo(publicKey, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'publicKey' is set
      if (publicKey === undefined || publicKey === null) {
        throw new Error("Missing the required parameter 'publicKey' when calling outgoingTransactions");
      }


      let pathParams = {
        'publicKey': publicKey
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/account/{publicKey}/transactions/outgoing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get outgoing transactions information
     * Returns outgoing transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    outgoingTransactions(publicKey, opts) {
      return this.outgoingTransactionsWithHttpInfo(publicKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get partial transactions information
     * Returns partial transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    partialTransactionsWithHttpInfo(publicKey, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'publicKey' is set
      if (publicKey === undefined || publicKey === null) {
        throw new Error("Missing the required parameter 'publicKey' when calling partialTransactions");
      }


      let pathParams = {
        'publicKey': publicKey
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/account/{publicKey}/transactions/partial', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get partial transactions information
     * Returns partial transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    partialTransactions(publicKey, opts) {
      return this.partialTransactionsWithHttpInfo(publicKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transactions information
     * Returns transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    transactionsWithHttpInfo(publicKey, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'publicKey' is set
      if (publicKey === undefined || publicKey === null) {
        throw new Error("Missing the required parameter 'publicKey' when calling transactions");
      }


      let pathParams = {
        'publicKey': publicKey
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/account/{publicKey}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get transactions information
     * Returns transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    transactions(publicKey, opts) {
      return this.transactionsWithHttpInfo(publicKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get unconfirmed transactions information
     * Returns unconfirmed transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
     */
    unconfirmedTransactionsWithHttpInfo(publicKey, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'publicKey' is set
      if (publicKey === undefined || publicKey === null) {
        throw new Error("Missing the required parameter 'publicKey' when calling unconfirmedTransactions");
      }


      let pathParams = {
        'publicKey': publicKey
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];

      return this.apiClient.callApi(
        '/account/{publicKey}/transactions/unconfirmed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get unconfirmed transactions information
     * Returns unconfirmed transactions information for a given publicKey
     * @param {String} publicKey Account publicKey
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of transactions to return
     * @param {String} opts.id Id last transaction id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
     */
    unconfirmedTransactions(publicKey, opts) {
      return this.unconfirmedTransactionsWithHttpInfo(publicKey, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
