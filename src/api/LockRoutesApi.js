/**
 * NIS2 API Endpoints
 * This document defines all the nis2 api endpoints
 *
 * OpenAPI spec version: 0.9.1
 * Contact: guillem@nemeurope.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LockFundsInfoDTO from '../model/LockFundsInfoDTO';
import SecretLockInfoDTO from '../model/SecretLockInfoDTO';

/**
* LockRoutes service.
* @module api/LockRoutesApi
* @version 0.9.1
*/
export default class LockRoutesApi {

    /**
    * Constructs a new LockRoutesApi. 
    * @alias module:api/LockRoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get lock funds information
     * Returns information for a given hash
     * @param {String} hash The funds for which information should be retreived
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LockFundsInfoDTO} and HTTP response
     */
    getLockFundsWithHttpInfo(hash) {
      let postBody = null;

      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getLockFunds");
      }


      let pathParams = {
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LockFundsInfoDTO;

      return this.apiClient.callApi(
        '/lock/hash/{hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get lock funds information
     * Returns information for a given hash
     * @param {String} hash The funds for which information should be retreived
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LockFundsInfoDTO}
     */
    getLockFunds(hash) {
      return this.getLockFundsWithHttpInfo(hash)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get lock funds information registered by an account
     * Returns information of lock funds registered an account
     * @param {String} accountId The account address or public key for which lock funds should be retrieved
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of lock funds to return
     * @param {String} opts.id The last lock funds id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LockFundsInfoDTO>} and HTTP response
     */
    getLockFundsInfoFromAccountWithHttpInfo(accountId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getLockFundsInfoFromAccount");
      }


      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LockFundsInfoDTO];

      return this.apiClient.callApi(
        '/account/{accountId}/lock/hash', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get lock funds information registered by an account
     * Returns information of lock funds registered an account
     * @param {String} accountId The account address or public key for which lock funds should be retrieved
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of lock funds to return
     * @param {String} opts.id The last lock funds id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LockFundsInfoDTO>}
     */
    getLockFundsInfoFromAccount(accountId, opts) {
      return this.getLockFundsInfoFromAccountWithHttpInfo(accountId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get secret lock information
     * Returns information for a given secret
     * @param {String} secret The secret for which information should be retreived
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecretLockInfoDTO} and HTTP response
     */
    getSecretLockWithHttpInfo(secret) {
      let postBody = null;

      // verify the required parameter 'secret' is set
      if (secret === undefined || secret === null) {
        throw new Error("Missing the required parameter 'secret' when calling getSecretLock");
      }


      let pathParams = {
        'secret': secret
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretLockInfoDTO;

      return this.apiClient.callApi(
        '/lock/secret/{secret}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get secret lock information
     * Returns information for a given secret
     * @param {String} secret The secret for which information should be retreived
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecretLockInfoDTO}
     */
    getSecretLock(secret) {
      return this.getSecretLockWithHttpInfo(secret)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get secret locks information registered by an account
     * Returns information of secret locks registered an account
     * @param {String} accountId The account address or public key for which secret locks should be retrieved
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of secret locks to return
     * @param {String} opts.id The last secret lock id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SecretLockInfoDTO>} and HTTP response
     */
    getSecretLocksInfoFromAccountWithHttpInfo(accountId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getSecretLocksInfoFromAccount");
      }


      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SecretLockInfoDTO];

      return this.apiClient.callApi(
        '/account/{accountId}/lock/secret', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get secret locks information registered by an account
     * Returns information of secret locks registered an account
     * @param {String} accountId The account address or public key for which secret locks should be retrieved
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize The numbers of secret locks to return
     * @param {String} opts.id The last secret lock id to apply pagination
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SecretLockInfoDTO>}
     */
    getSecretLocksInfoFromAccount(accountId, opts) {
      return this.getSecretLocksInfoFromAccountWithHttpInfo(accountId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
